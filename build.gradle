plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13' // ✅ Add JavaFX Plugin
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'checkstyle' // Keep Checkstyle, but don't make it part of `build`
}

checkstyle {
    toolVersion = '10.2'
}

repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/releases/' } // ✅ Add JavaFX repo
}

dependencies {
    implementation 'org.testng:testng:7.1.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'

    // ✅ Correct JavaFX dependencies
    implementation 'org.openjfx:javafx-controls:17.0.7'
    implementation 'org.openjfx:javafx-fxml:17.0.7'
    implementation 'org.openjfx:javafx-graphics:17.0.7'
    implementation 'org.openjfx:javafx-base:17.0.7'
}

javafx {
    version = "17.0.7"
    modules = ['javafx.controls', 'javafx.fxml']
}


test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"

        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true
        showStandardStreams = false
    }
}


application {
    mainClass.set("phone.Launcher") // ✅ Use Launcher to avoid JavaFX classpath issues
}

shadowJar {
    archiveBaseName.set("phone")
    archiveClassifier.set(null)
    archiveVersion.set("")
    manifest {
        attributes 'Main-Class': 'phone.Launcher' // ✅ Use Launcher as entry point
    }
}

// ✅ Ensure Checkstyle does NOT run on every build
tasks.named("checkstyleMain") {
    onlyIf { false }
}
tasks.named("checkstyleTest") {
    onlyIf { false }
}

// ✅ Define a manual task to run Checkstyle when needed
tasks.register("runCheckstyle") {
    dependsOn "checkstyleMain", "checkstyleTest"
}

run {
    standardInput = System.in
}
